{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dima\\\\React\\\\Work\\\\src\\\\components\\\\Materials\\\\Boards\\\\Boards.js\",\n    _s = $RefreshSig$();\n\nimport { useState, Fragment, useCallback, useEffect } from \"react\";\nimport BoardsList from \"./BoardsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Boards = () => {\n  _s();\n\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchBoardsHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://react-http-1b4c8-default-rtdb.firebaseio.com/Boards.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const results = JSON.parse(data);\n      console.log(results);\n      const transformedBoards = results.map(boardData => {\n        return {\n          id: boardData.ProductId,\n          article: boardData.ProductArtikle,\n          length: boardData.ProductLength,\n          name: boardData.ProductName,\n          price: boardData.ProductPrice,\n          bredd: boardData.ProductBredd,\n          price1: boardData.ProductPrice_Ed_izm,\n          price2: boardData.ProductComparsionPrice_Ed_izm\n        };\n      });\n      setBoards(transformedBoards);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchBoardsHandler();\n  }, [fetchBoardsHandler]);\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no boards.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 17\n  }, this);\n\n  if (boards.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(BoardsList, {\n      boards: boards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchBoardsHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Boards, \"xZy18K4gu4kEy8jIziwsRNWh0z4=\");\n\n_c = Boards;\nexport default Boards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Boards\");","map":{"version":3,"sources":["C:/Dima/React/Work/src/components/Materials/Boards/Boards.js"],"names":["useState","Fragment","useCallback","useEffect","BoardsList","Boards","boards","setBoards","isLoading","setIsLoading","error","setError","fetchBoardsHandler","response","fetch","ok","Error","data","json","results","JSON","parse","console","log","transformedBoards","map","boardData","id","ProductId","article","ProductArtikle","length","ProductLength","name","ProductName","price","ProductPrice","bredd","ProductBredd","price1","ProductPrice_Ed_izm","price2","ProductComparsionPrice_Ed_izm","message","content"],"mappings":"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","sourcesContent":["import { useState, Fragment, useCallback, useEffect } from \"react\";\r\nimport BoardsList from \"./BoardsList\";\r\n\r\nconst Boards = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchBoardsHandler = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        \"https://react-http-1b4c8-default-rtdb.firebaseio.com/Boards.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const results = JSON.parse(data);\r\n      console.log(results)\r\n      const transformedBoards = results.map((boardData) => {\r\n        return {\r\n          id: boardData.ProductId,\r\n          article: boardData.ProductArtikle,\r\n          length: boardData.ProductLength,\r\n          name: boardData.ProductName,\r\n          price: boardData.ProductPrice,\r\n          bredd: boardData.ProductBredd,\r\n          price1: boardData.ProductPrice_Ed_izm,\r\n          price2: boardData.ProductComparsionPrice_Ed_izm,\r\n        };\r\n      });\r\n      setBoards(transformedBoards);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchBoardsHandler();\r\n  }, [fetchBoardsHandler]);\r\n\r\n  let content = <p>Found no boards.</p>;\r\n\r\n  if (boards.length > 0) {\r\n    content = <BoardsList boards={boards} />;\r\n  }\r\n\r\n  if (error) {\r\n    content = <p>{error}</p>;\r\n  }\r\n\r\n  if (isLoading) {\r\n    content = <p>Loading...</p>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n        <section>\r\n        <button onClick={fetchBoardsHandler}>Fetch Movies</button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n"]},"metadata":{},"sourceType":"module"}