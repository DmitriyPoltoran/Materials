{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dima\\\\React\\\\Work\\\\src\\\\components\\\\Materials\\\\Boards\\\\Boards.js\",\n    _s = $RefreshSig$();\n\nimport { useState, Fragment, useCallback, useEffect } from \"react\";\nimport BoardsList from \"./BoardsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Boards = () => {\n  _s();\n\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchBoardsHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://react-http-1b4c8-default-rtdb.firebaseio.com/Boards.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedBoards = [];\n\n      for (const key in data) {\n        loadedBoards.push({\n          id: loadedBoards[key].ProductId,\n          article: loadedBoards[key].ProductArtikle,\n          length: loadedBoards[key].ProductLength,\n          name: loadedBoards[key].ProductName,\n          price: loadedBoards[key].ProductPrice,\n          bredd: loadedBoards[key].ProductBredd,\n          price1: loadedBoards[key].ProductPrice_Ed_izm,\n          price2: loadedBoards[key].ProductComparsionPrice_Ed_izm\n        });\n      }\n\n      console.log(loadedBoards); //   const transformedBoards = data.results.map((boardData) => {\n      //     return {\n      //       id: boardData.ProductId,\n      //       article: boardData.ProductArtikle,\n      //       length: boardData.ProductLength,\n      //       name: boardData.ProductName,\n      //       price: boardData.ProductPrice,\n      //       bredd: boardData.ProductBredd,\n      //       price1: boardData.ProductPrice_Ed_izm,\n      //       price2: boardData.ProductComparsionPrice_Ed_izm,\n      //     };\n      //   });\n\n      setBoards(loadedBoards);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchBoardsHandler();\n  }, [fetchBoardsHandler]);\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no boards.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 17\n  }, this);\n\n  if (boards.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(BoardsList, {\n      boards: boards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchBoardsHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Boards, \"xZy18K4gu4kEy8jIziwsRNWh0z4=\");\n\n_c = Boards;\nexport default Boards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Boards\");","map":{"version":3,"sources":["C:/Dima/React/Work/src/components/Materials/Boards/Boards.js"],"names":["useState","Fragment","useCallback","useEffect","BoardsList","Boards","boards","setBoards","isLoading","setIsLoading","error","setError","fetchBoardsHandler","response","fetch","ok","Error","data","json","loadedBoards","key","push","id","ProductId","article","ProductArtikle","length","ProductLength","name","ProductName","price","ProductPrice","bredd","ProductBredd","price1","ProductPrice_Ed_izm","price2","ProductComparsionPrice_Ed_izm","console","log","message","content"],"mappings":"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","sourcesContent":["import { useState, Fragment, useCallback, useEffect } from \"react\";\r\nimport BoardsList from \"./BoardsList\";\r\n\r\nconst Boards = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchBoardsHandler = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        \"https://react-http-1b4c8-default-rtdb.firebaseio.com/Boards.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const loadedBoards = [];\r\n      for (const key in data) {\r\n          loadedBoards.push({\r\n            id: loadedBoards[key].ProductId,\r\n            article: loadedBoards[key].ProductArtikle,\r\n            length: loadedBoards[key].ProductLength,\r\n            name: loadedBoards[key].ProductName,\r\n            price: loadedBoards[key].ProductPrice,\r\n            bredd: loadedBoards[key].ProductBredd,\r\n            price1: loadedBoards[key].ProductPrice_Ed_izm,\r\n            price2: loadedBoards[key].ProductComparsionPrice_Ed_izm,\r\n          })\r\n      }\r\n      console.log(loadedBoards)\r\n    //   const transformedBoards = data.results.map((boardData) => {\r\n    //     return {\r\n    //       id: boardData.ProductId,\r\n    //       article: boardData.ProductArtikle,\r\n    //       length: boardData.ProductLength,\r\n    //       name: boardData.ProductName,\r\n    //       price: boardData.ProductPrice,\r\n    //       bredd: boardData.ProductBredd,\r\n    //       price1: boardData.ProductPrice_Ed_izm,\r\n    //       price2: boardData.ProductComparsionPrice_Ed_izm,\r\n    //     };\r\n    //   });\r\n      setBoards(loadedBoards);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchBoardsHandler();\r\n  }, [fetchBoardsHandler]);\r\n\r\n  let content = <p>Found no boards.</p>;\r\n\r\n  if (boards.length > 0) {\r\n    content = <BoardsList boards={boards} />;\r\n  }\r\n\r\n  if (error) {\r\n    content = <p>{error}</p>;\r\n  }\r\n\r\n  if (isLoading) {\r\n    content = <p>Loading...</p>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n        <section>\r\n        <button onClick={fetchBoardsHandler}>Fetch Movies</button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n"]},"metadata":{},"sourceType":"module"}